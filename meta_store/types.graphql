# Interfaces
# interface Resource {
#     id: ID!
#     name: String!
# }

# interface ManufacturingFacility {
#     id: ID!
#     name: String!
# }

# union Resource = Company | Plant | Area | Line | Cell | Machine

interface ContainingElement {
    observableProperties: [ObservableProperty!]! @relationship(type: "has", direction: OUT)
    id: ID!
    name: String!
    description: String!
}

interface Resource {
    id: ID!
    name: String!
    description: String!
}
type Query {
    resources(): [Resource]!
}

# Types
type Company implements Resource{
    id: ID!
    name: String!
    description: String!
    plants: [Plant!]! @relationship(type: "has", direction: OUT)
    observableProperties: [ObservableProperty!]!
}

type Plant implements ContainingElement {
    id: ID!
    name: String!
    description: String!
    areas: [Area!]! @relationship(type: "has", direction: OUT)
    observableProperties: [ObservableProperty!]!
}

type Area implements ContainingElement {
    id: ID!
    name: String!
    description: String!
    lines: [Line!]! @relationship(type: "has", direction: OUT)
    observableProperties: [ObservableProperty!]!
}


type Line implements ContainingElement{
    id: ID!
    name: String!
    description: String!
    cells: [Cell!]!  @relationship(type: "has", direction: OUT)
    observableProperties: [ObservableProperty!]!
}

type Cell implements ContainingElement{
    id: ID!
    name: String!
    description: String!
    machines: [Machine!]! @relationship(type: "has", direction: OUT)
    observableProperties: [ObservableProperty!]!
}

type Machine implements ContainingElement{
    id: ID!
    name: String!
    description: String!
    observableProperties: [ObservableProperty!]!
}

type ObservableProperty{
    id: ID!
    name: String!
    description: String!
    frequency: Int!
    topic: Topic! @relationship(type: "has", direction: OUT)
    connectionDetails: String!
    propertyOf: ContainingElement! @relationship(type: "has", direction: IN)
    accessibleVia: [EgressEndpoint!]! @relationship(type: "accessVia", direction: IN)
    dataFormat: String!
    changedFrequency: Int!
}

type EgressEndpoint{
    id: ID!
    name: String!
    description: String!
    connectionDetails: String!
    frequency: Int!
    dataFormat: String!
    accessTo: [ObservableProperty!]! @relationship(type: "accessVia", direction: OUT)
    changedFrequency: Int!
    egressGroup: String!
}

type Topic{
    id: ID!
    name: String!
    description: String!
    topicOf: ObservableProperty! @relationship(type: "has", direction: IN)
}


# type Resource{
#     id: ID!
#     name: String!
#     description: String!
#     ObservableProperties: [ObservableProperty!]! @relationship(type: "has", direction: OUT)
# }





