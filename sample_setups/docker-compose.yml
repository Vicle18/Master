services:
## Kafka
  kafka1:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka1
    ports:
      - 19092:19092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093,EXTERNAL://0.0.0.0:19092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,EXTERNAL://${HOST_DNS}:19092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
    volumes:
      - ./run_workaround.sh:/tmp/run_workaround.sh
    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    networks:
      shared_network:
    profiles:
      - kafka
      
  kafka2:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka2
    ports:
      - 19094:19094
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka2:9092,CONTROLLER://kafka2:9093,EXTERNAL://0.0.0.0:19094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092,EXTERNAL://${HOST_DNS}:19094
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
    volumes:
      - ./run_workaround.sh:/tmp/run_workaround.sh
    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    networks:
      shared_network:
    profiles:
      - kafka

  kafka3:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka3
    ports:
      - 19095:19095
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka3:9092,CONTROLLER://kafka3:9093,EXTERNAL://0.0.0.0:19095
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092,EXTERNAL://${HOST_DNS}:19095
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
    volumes:
      - ./run_workaround.sh:/tmp/run_workaround.sh
    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    networks:
      shared_network:
    profiles:
      - kafka
  kowl: 
    image: quay.io/cloudhut/kowl:master
    ports:
      - 8088:8080
    environment:
      KAFKA_BROKERS: kafka1:9092
    restart: always
    depends_on: 
      - "kafka1"
    profiles:
      - kafka
    networks:
      shared_network:
## meta store
  meta: 
    build: ../meta_store
    ports:
      - 4001:4000
    restart: always
    environment:
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=bendevictor
      - NEO4J_URI=neo4j://neo4j:7687
    depends_on:
      - neo4j
    profiles:
      - meta_store
    networks:
      shared_network:

  neo4j:
    image: neo4j
    restart: unless-stopped
    ports:
      - 7474:7474
      - 7687:7687
    volumes:
      - ./neo4j/conf:/conf
      - ./neo4j/data:/data
      - ./neo4j/import:/import
      - ./neo4j/logs:/logs
      - ./neo4j/plugins:/plugins
    environment: 
      # Raise memory limits
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms.memory.heap.initial_size=1G
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_AUTH=neo4j/bendevictor
    profiles:
      - meta_store
    networks:
      shared_network:
## MQTT
  mosquitto:
    image: eclipse-mosquitto
    ports:
      - 1883:1883
    volumes:
      - ./mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf
    profiles:
      - mqtt_broker
    networks:
      shared_network:
  producer:
    build: ./mqtt
    depends_on:
      - mosquitto
    environment:
      - HOST=mosquitto
      - PORT=1883
    profiles:
      - mqtt_producer
    networks:
      shared_network:
## REST
  server:
    build: ./rest
    ports:
      - "5001:5001"
    profiles:
      - rest_server
    networks:
      shared_network:
## nginx
  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "8090:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - server
    profiles:
      - nginx
    networks:
      shared_network:
## opcua broker
  opcuabroker:
    build:
      context: ./opcua
      dockerfile: Dockerfile
    ports:
      - 8888:8888
    profiles:
      - opcua_broker
    networks:
      shared_network:
## opcua client
  opcuaclient:
    build:
      context: ./opcua
      dockerfile: Dockerfile.producer
    depends_on:
      - opcuabroker
    restart: always
    environment:
      - OPCUA_SERVER_URL=opc.tcp://opcuabroker:8888/freeopcua/server/
      - OPCUA_NODE_NAME=ns=6;s=::AsGlobalPV:MoveAssemblyPart
      - OPCUA_SLEEP_TIME=0.5
      - OPCUA_VALUE=int # bool, int, string
      - OPCUA_MIN_VALUE=0 # only for int
      - OPCUA_MAX_VALUE=10 # only for int
      - OPCUA_STRING_VALUES=this,that,other # only for string
    profiles:
      - opcua_producer
    networks:
      shared_network:
networks:
  shared_network:
    name: "shared_network"