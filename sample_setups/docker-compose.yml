services:
## Kafka
  kafka1:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka1
    ports:
      - 19092:19092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093,EXTERNAL://0.0.0.0:19092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,EXTERNAL://${HOST_DNS}:19092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
    volumes:
      - ./run_workaround.sh:/tmp/run_workaround.sh
    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    networks:
      shared_network:
    profiles:
      - kafka
      
  kafka2:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka2
    ports:
      - 19094:19094
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka2:9092,CONTROLLER://kafka2:9093,EXTERNAL://0.0.0.0:19094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092,EXTERNAL://${HOST_DNS}:19094
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
    volumes:
      - ./run_workaround.sh:/tmp/run_workaround.sh
    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    networks:
      shared_network:
    profiles:
      - kafka

  kafka3:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka3
    ports:
      - 19095:19095
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka3:9092,CONTROLLER://kafka3:9093,EXTERNAL://0.0.0.0:19095
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092,EXTERNAL://${HOST_DNS}:19095
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
    volumes:
      - ./run_workaround.sh:/tmp/run_workaround.sh
    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    networks:
      shared_network:
    profiles:
      - kafka
  # kowl: 
  #   image: quay.io/cloudhut/kowl:master
  #   ports:
  #     - 8089:8080
  #   environment:
  #     KAFKA_BROKERS: kafka1:9092
  #     SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #   restart: always
  #   depends_on: 
  #     - kafka1
  #     - schema-registry
  #   profiles:
  #     - kafka
  #   networks:
  #     shared_network:

  console:
    container_name: redpanda-console
    image: docker.redpanda.com/vectorized/console:v2.2.0
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    restart: always
    environment: 
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka1:9092"]
    ports:
      - 8090:8080
    depends_on:
      - kafka1
    profiles:
      - kafka
    networks:
      shared_network:








## meta store
  meta: 
    image: clemme/meta-store:latest
    ports:
      - 4001:4000
    restart: always
    environment:
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=bendevictor
      - NEO4J_URI=neo4j://host.docker.internal:7687
    depends_on:
      - neo4j
    profiles:
      - meta_store
    networks:
      shared_network:

  neo4j:
    image: neo4j
    restart: unless-stopped
    ports:
      - 7474:7474
      - 7687:7687
    volumes:
      - ./neo4j/conf:/conf
      - ./neo4j/data:/data
      - ./neo4j/import:/import
      - ./neo4j/logs:/logs
      - ./neo4j/plugins:/plugins
    environment: 
      # Raise memory limits
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms.memory.heap.initial_size=1G
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_AUTH=neo4j/bendevictor
    profiles:
      - meta_store_neo4j
    networks:
      shared_network:

## MQTT
  mosquitto:
    image: eclipse-mosquitto
    ports:
      - 1883:1883
    volumes:
      - ./mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf
    profiles:
      - mqtt_broker
    networks:
      shared_network:
  producer:
    build: ./mqtt
    restart: always
    depends_on:
      - mosquitto
    environment:
      - HOST=mosquitto
      - PORT=1883
      - SLEEP_TIME=0.5
    profiles:
      - mqtt_producer
    networks:
      shared_network:
## REST
  server:
    build: ./rest
    ports:
      - "5001:5001"
    profiles:
      - rest_server
    networks:
      shared_network:
## nginx
  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "8050:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    profiles:
      - nginx
    networks:
      shared_network:
## opcua broker
  opcuabroker:
    build:
      context: ./opcua
      dockerfile: Dockerfile
    restart: always
    ports:
      - 8888:8888
    profiles:
      - opcua_broker
    networks:
      shared_network:
## opcua client
  opcuaclient:
    build:
      context: ./opcua
      dockerfile: Dockerfile.producer
    depends_on:
      - opcuabroker
    restart: always
    environment:
      - OPCUA_SERVER_URL=opc.tcp://opcuabroker:8888/freeopcua/server/
      - OPCUA_NODE_NAME=ns=6;s=::AsGlobalPV:MoveAssemblyPart
      - OPCUA_SLEEP_TIME=2 # seconds
      - OPCUA_VALUE=int # bool, int, string
      - OPCUA_MIN_VALUE=0 # only for int
      - OPCUA_MAX_VALUE=10 # only for int
      - OPCUA_STRING_VALUES=this,that,other # only for string
    profiles:
      - opcua_producer
    networks:
      shared_network:
## UR SIM
  ur:
    image: universalrobots/ursim_e-series
    ports:
      - 29999:29999
      - 30004:30004
      - 6080:6080
    profiles:
      - ur
    networks:
      shared_network:
## ingress
  ingress:
    # image: clemme/ingress:latest
    image: ingress
    environment:
      - INGRESS_CONFIG__PROTOCOL=OPCUA
      - INGRESS_CONFIG__PARAMETERS__SERVER_URL=opc.tcp://host.docker.internal:8888/freeopcua/server/
      - INGRESS_CONFIG__PARAMETERS__NODE_NAME=ns=6;s=::AsGlobalPV:MoveAssemblyPart
      - INGRESS_CONFIG__PARAMETERS__VALUE_TYPE=int
      - INGRESS_CONFIG__PARAMETERS__TARGET_TOPIC=opcuaTest
      - BUS_CONFIG__PROTOCOL=KAFKA
      - BUS_CONFIG__PARAMETERS__HOST=host.docker.internal
      - BUS_CONFIG__PARAMETERS__PORT=19092
    # restart: always
    profiles:
      - ingress
    networks:
      shared_network:
## MiddlewareManager
  middlewaremanager:
    # build:
    #   context: ../middleware_manager/MiddlewareManager
    #   dockerfile: Dockerfile
    image: clemme/middleware-manager:latest
    environment:
      "METASTORE_URL": "http://host.docker.internal:4000"
      "SERVICE_ORCHESTRATOR_URL": "http://serviceconfigurator:80"
    ports:
      - 7014:80
    profiles:
      - middlewaremanager
    networks:
      shared_network:
## service configurator
  serviceconfigurator:
    # build:
    #   context: ../service_orchestrator/ServiceOrchestrator
    #   dockerfile: Dockerfile
    image: clemme/service-configurator:latest
    environment:
      "KUBERNETES_CONFIG__KUBERNETES_HOST": "https://host.docker.internal:34129"
      "KUBERNETES_CONFIG__KUBERNETES_ACCESS_TOKEN": "eyJhbGciOiJSUzI1NiIsImtpZCI6IkFqMTBxY3ZVMFFJVURtUWpNbTJaWl9wUUg5TVdKQVNmYWZ1VHVVclZlcUEifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjg1NDUyMDk2LCJpYXQiOjE2ODI4NjAwOTYsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJzc28iLCJzZXJ2aWNlYWNjb3VudCI6eyJuYW1lIjoic2VydmljZS1vcmNoZXN0cmF0b3IiLCJ1aWQiOiJkNzMwMGVkMi1iMmI4LTQ4N2MtODA0Ni1mMmMyOTQ3NWFiM2UifX0sIm5iZiI6MTY4Mjg2MDA5Niwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OnNzbzpzZXJ2aWNlLW9yY2hlc3RyYXRvciJ9.CERxzvpRWxkWoFWlCHnBVBApYx1kWQPC0kdnkpGQFbawb_D7E53ecdlNP-4E_OGPeyVK-msxuYV2ZhuGlU2lsDJHfFXlRKaj9zn8GrTcHAiDahzzHh_LpnVSeJ9PX04AMGWMKbIAmCMZeolHQaXtEKCHyRFE43C_NIijONCAYtXLoSXt-YFSD73zwoayZkDb6ieZcBNwKhC_VPx-Zdqzsf1itSVj25l_wvWQ6b2VTKc2V5LmWQ4MwHKvrh2GYXSVrigGClsBso22jF26ac_O6EES-fMB1ciLH9WivzF3jo0Czl8DLGHlK9BtkaSUGvQg5RApNqzF0JLJ6aafi04cYQ"
    ports:
      - 8889:80
    profiles:
      - serviceconfigurator
    networks:
      shared_network:
## frontend
  frontend:
    # build:
    #   context: ../frontend/frontend
    #   dockerfile: Dockerfile
    image: clemme/frontend:latest
    environment:
      "REACT_APP_MIDDLEWARE_URL": "http://host.docker.internal:8082"
      "REACT_APP_METASTORE": "http://host.docker.internal:4000"
      "REACT_APP_METASTORE_URL": "http://host.docker.internal:4000"
      "REACT_APP_DATAEXPLORER_URL": "http://host.docker.internal:8086"
    ports:
      - 3000:3000
    profiles:
      - frontend
    networks:
      shared_network:
networks:
  shared_network:
    name: "shared_network"