services:
## Kafka
  kafka1:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka1
    ports:
      - 19092:19092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093,EXTERNAL://0.0.0.0:19092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,EXTERNAL://localhost:19092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
    volumes:
      - ./run_workaround.sh:/tmp/run_workaround.sh
    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    networks:
      shared_network:
    profiles:
      - kafka
      
  kafka2:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka2
    ports:
      - 19094:19094
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka2:9092,CONTROLLER://kafka2:9093,EXTERNAL://0.0.0.0:19094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092,EXTERNAL://localhost:19094
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
    volumes:
      - ./run_workaround.sh:/tmp/run_workaround.sh
    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    networks:
      shared_network:
    profiles:
      - kafka

  kafka3:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka3
    ports:
      - 19095:19095
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka3:9092,CONTROLLER://kafka3:9093,EXTERNAL://0.0.0.0:19095
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092,EXTERNAL://localhost:19095
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
    volumes:
      - ./run_workaround.sh:/tmp/run_workaround.sh
    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    networks:
      shared_network:
    profiles:
      - kafka
  # kowl: 
  #   image: quay.io/cloudhut/kowl:master
  #   ports:
  #     - 8089:8080
  #   environment:
  #     KAFKA_BROKERS: kafka1:9092
  #     SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #   restart: always
  #   depends_on: 
  #     - kafka1
  #     - schema-registry
  #   profiles:
  #     - kafka
  #   networks:
  #     shared_network:

  console:
    container_name: redpanda-console
    image: docker.redpanda.com/vectorized/console:v2.2.0
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    restart: always
    environment: 
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka1:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://schema-registry:8081"]
    ports:
      - 8090:8080
    depends_on:
      - kafka1
      - schema-registry
    profiles:
      - kafka
    networks:
      shared_network:

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    hostname: schema-registry
    container_name: schema-registry
    restart: always
    depends_on:
      - kafka1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka1:9092'
    profiles:
      - kafka
    networks:
      shared_network:

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.28.2
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka1
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksqldb/log4j.properties"
      KSQL_BOOTSTRAP_SERVERS: "kafka1:9092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
    profiles:
      - kafka_ksqldb
    networks:
      shared_network:

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.28.2
    container_name: ksqldb-cli
    depends_on:
      - kafka1
      - ksqldb-server
    entrypoint: /bin/sh
    environment:
      KSQL_CONFIG_DIR: "/etc/ksqldb"
    tty: true
    volumes:
      - ./ksqldb/src:/opt/app/src
      - ./ksqldb/test:/opt/app/test
    profiles:
      - kafka_ksqldb
    networks:
      shared_network:

## meta store
  meta: 
    build: ../meta_store
    ports:
      - 4001:4000
    restart: always
    environment:
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=bendevictor
      - NEO4J_URI=neo4j://neo4j:7687
    depends_on:
      - neo4j
    profiles:
      - meta_store
    networks:
      shared_network:

  neo4j:
    image: neo4j
    restart: unless-stopped
    ports:
      - 7474:7474
      - 7687:7687
    volumes:
      - ./neo4j/conf:/conf
      - ./neo4j/data:/data
      - ./neo4j/import:/import
      - ./neo4j/logs:/logs
      - ./neo4j/plugins:/plugins
    environment: 
      # Raise memory limits
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms.memory.heap.initial_size=1G
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_AUTH=neo4j/bendevictor
    profiles:
      - meta_store
    networks:
      shared_network:
## MQTT
  mosquitto:
    image: eclipse-mosquitto
    ports:
      - 1883:1883
    volumes:
      - ./mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf
    profiles:
      - mqtt_broker
    networks:
      shared_network:
  producer:
    build: ./mqtt
    restart: always
    depends_on:
      - mosquitto
    environment:
      - HOST=mosquitto
      - PORT=1883
    profiles:
      - mqtt_producer
    networks:
      shared_network:
## REST
  server:
    build: ./rest
    ports:
      - "5001:5001"
    profiles:
      - rest_server
    networks:
      shared_network:
## nginx
  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "8090:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - server
    profiles:
      - nginx
    networks:
      shared_network:
## opcua broker
  opcuabroker:
    build:
      context: ./opcua
      dockerfile: Dockerfile
    ports:
      - 8888:8888
    profiles:
      - opcua_broker
    networks:
      shared_network:
## opcua client
  opcuaclient:
    build:
      context: ./opcua
      dockerfile: Dockerfile.producer
    depends_on:
      - opcuabroker
    restart: always
    environment:
      - OPCUA_SERVER_URL=opc.tcp://opcuabroker:8888/freeopcua/server/
      - OPCUA_NODE_NAME=ns=6;s=::AsGlobalPV:MoveAssemblyPart
      - OPCUA_SLEEP_TIME=2 # seconds
      - OPCUA_VALUE=int # bool, int, string
      - OPCUA_MIN_VALUE=0 # only for int
      - OPCUA_MAX_VALUE=10 # only for int
      - OPCUA_STRING_VALUES=this,that,other # only for string
    profiles:
      - opcua_producer
    networks:
      shared_network:
## ingress
  ingress:
    # image: clemme/ingress:latest
    image: ingress
    environment:
      - INGRESS_CONFIG__PROTOCOL=OPCUA
      - INGRESS_CONFIG__PARAMETERS__SERVER_URL=opc.tcp://host.docker.internal:8888/freeopcua/server/
      - INGRESS_CONFIG__PARAMETERS__NODE_NAME=ns=6;s=::AsGlobalPV:MoveAssemblyPart
      - INGRESS_CONFIG__PARAMETERS__VALUE_TYPE=int
      - INGRESS_CONFIG__PARAMETERS__TARGET_TOPIC=opcuaTest
      - BUS_CONFIG__PROTOCOL=KAFKA
      - BUS_CONFIG__PARAMETERS__HOST=host.docker.internal
      - BUS_CONFIG__PARAMETERS__PORT=19092
    #restart: always
    profiles:
      - ingress
    networks:
      shared_network:
networks:
  shared_network:
    name: "shared_network"